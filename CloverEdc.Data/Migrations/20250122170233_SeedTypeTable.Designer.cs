// <auto-generated />
using System;
using CloverEdc.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloverEdc.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250122170233_SeedTypeTable")]
    partial class SeedTypeTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloverEdc.Core.Models.AdverseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTreated")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrfId");

                    b.ToTable("AdverseEvents");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.BaseField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("BaseFields");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Crcs");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrcCrf", b =>
                {
                    b.Property<Guid>("CrcId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CrcId", "CrfId");

                    b.HasIndex("CrfId");

                    b.ToTable("CrcCrfs");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrcId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrcId");

                    b.HasIndex("CrfTemplateId");

                    b.HasIndex("PatientId");

                    b.ToTable("Crfs");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequiredFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequiredFieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequiredOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseFieldId");

                    b.HasIndex("CrfFileId");

                    b.ToTable("CrfFields");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequiredFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrfTemplateId");

                    b.HasIndex("ParentFileId");

                    b.ToTable("CrfFiles");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("CrfTemplates");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DropDownValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrfFieldId");

                    b.HasIndex("DropDownValueId");

                    b.HasIndex("FileId");

                    b.ToTable("CrfValues");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Dm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dms");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.DmQuery", b =>
                {
                    b.Property<Guid>("DmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("DmId", "QueryId");

                    b.HasIndex("QueryId");

                    b.ToTable("DmQueries");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.DropDownOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseFieldId");

                    b.ToTable("DropDownOptions");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateDone")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CrfFileId");

                    b.HasIndex("CrfId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Lock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LockedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.HasIndex("UserId");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RandomizationArm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Pi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pis");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Protocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfVisits")
                        .HasColumnType("int");

                    b.Property<bool>("Randomization")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Protocols");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c53a6657-7be0-4c1e-ae21-69ef395de9b2"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Protocol-1",
                            NumOfVisits = 3,
                            Randomization = true
                        },
                        new
                        {
                            Id = new Guid("234ebf04-2019-4103-ac66-56c4d8546984"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Protocol-2",
                            NumOfVisits = 2,
                            Randomization = false
                        });
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Query", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrfValueId");

                    b.HasIndex("DmId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7005a56-6273-4bbc-b96f-826bd49d1ddf"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("94a52d54-c446-470b-93c7-98676b0c46ef"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("479c485b-e6d7-4137-a41c-943275e1e0f7"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "PI"
                        },
                        new
                        {
                            Id = new Guid("de1c3bde-444d-4de2-ab56-8f923628676d"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "CRC"
                        },
                        new
                        {
                            Id = new Guid("ce85653c-5521-4d84-9800-93b66fc217ff"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "DM"
                        });
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PiId");

                    b.HasIndex("StudyId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Study", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b912ced8-67bd-4583-bd25-8593ad09d25d"),
                            DataType = "string",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Text"
                        },
                        new
                        {
                            Id = new Guid("a624b7d8-dd79-4fe9-86fb-5d8f39b0f8bb"),
                            DataType = "decimal",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Number"
                        },
                        new
                        {
                            Id = new Guid("2ba95634-97f3-4313-a2b8-38aff2e587b9"),
                            DataType = "DateTime",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Date"
                        },
                        new
                        {
                            Id = new Guid("8d05441f-bf16-4928-86ea-f09ec1a52219"),
                            DataType = "List<string>",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "DropDown"
                        },
                        new
                        {
                            Id = new Guid("cb2b6926-fbce-45f7-b56b-41dc1ad9b41f"),
                            DataType = "File",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "File"
                        },
                        new
                        {
                            Id = new Guid("61c0b7b4-a0db-4fa5-b593-05de15b0a4da"),
                            DataType = "bool",
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "ToggleButton"
                        });
                });

            modelBuilder.Entity("CloverEdc.Core.Models.UpdateRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CrfValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrfValueId");

                    b.ToTable("UpdateRequests");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd72e76e-6b58-46d2-9903-a6afb38dc514"),
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "superAdmin@example.com",
                            FirstName = "Supera",
                            IsDeleted = false,
                            LastName = "Admina",
                            Password = "i35LXzP80StjUXPntX0Sz5XQGXPEfWGrN+UsGaPjTSaVj6FlAwB3XX3+FFulZ6XR",
                            RefreshToken = new Guid("9e0d9f97-c76e-4d80-a6c1-d3317d5f18e2"),
                            RoleId = new Guid("94a52d54-c446-470b-93c7-98676b0c46ef"),
                            UserName = "superAdmina"
                        });
                });

            modelBuilder.Entity("CloverEdc.Core.Models.AdverseEvent", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Crf", "Crf")
                        .WithMany()
                        .HasForeignKey("CrfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crf");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.AuditTrail", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.BaseField", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crc", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrcCrf", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Crc", "Crc")
                        .WithMany("CrcCrfs")
                        .HasForeignKey("CrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Crf", "Crf")
                        .WithMany("CrcCrfs")
                        .HasForeignKey("CrfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crc");

                    b.Navigation("Crf");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crf", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Crc", "Crc")
                        .WithMany()
                        .HasForeignKey("CrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.CrfTemplate", "CrfTemplate")
                        .WithMany()
                        .HasForeignKey("CrfTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crc");

                    b.Navigation("CrfTemplate");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfField", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.BaseField", "BaseField")
                        .WithMany()
                        .HasForeignKey("BaseFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.CrfFile", "CrfFile")
                        .WithMany()
                        .HasForeignKey("CrfFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseField");

                    b.Navigation("CrfFile");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfFile", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.CrfTemplate", "CrfTemplate")
                        .WithMany()
                        .HasForeignKey("CrfTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.CrfFile", null)
                        .WithMany("SubFiles")
                        .HasForeignKey("ParentFileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CrfTemplate");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfTemplate", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Study");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfValue", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.CrfField", "CrfField")
                        .WithMany()
                        .HasForeignKey("CrfFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.DropDownOption", "DropDownValue")
                        .WithMany()
                        .HasForeignKey("DropDownValueId");

                    b.HasOne("CloverEdc.Core.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrfField");

                    b.Navigation("DropDownValue");

                    b.Navigation("File");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Dm", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.DmQuery", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Dm", "Dm")
                        .WithMany("DmQueries")
                        .HasForeignKey("DmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Query", "Query")
                        .WithMany("DmQueries")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dm");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.DropDownOption", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.BaseField", "BaseField")
                        .WithMany()
                        .HasForeignKey("BaseFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseField");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.File", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.CrfFile", "CrfFile")
                        .WithMany()
                        .HasForeignKey("CrfFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Crf", "Crf")
                        .WithMany()
                        .HasForeignKey("CrfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crf");

                    b.Navigation("CrfFile");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Lock", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Study");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Patient", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Pi", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Query", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.CrfValue", "CrfValue")
                        .WithMany()
                        .HasForeignKey("CrfValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Dm", "Dm")
                        .WithMany()
                        .HasForeignKey("DmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrfValue");

                    b.Navigation("Dm");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Site", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Pi", "Pi")
                        .WithMany()
                        .HasForeignKey("PiId");

                    b.HasOne("CloverEdc.Core.Models.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pi");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Study", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.UpdateRequest", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.CrfValue", "CrfValue")
                        .WithMany()
                        .HasForeignKey("CrfValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrfValue");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.User", b =>
                {
                    b.HasOne("CloverEdc.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloverEdc.Core.Models.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId");

                    b.Navigation("Role");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crc", b =>
                {
                    b.Navigation("CrcCrfs");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Crf", b =>
                {
                    b.Navigation("CrcCrfs");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.CrfFile", b =>
                {
                    b.Navigation("SubFiles");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Dm", b =>
                {
                    b.Navigation("DmQueries");
                });

            modelBuilder.Entity("CloverEdc.Core.Models.Query", b =>
                {
                    b.Navigation("DmQueries");
                });
#pragma warning restore 612, 618
        }
    }
}
